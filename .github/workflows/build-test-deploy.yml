name: "Build test deploy"

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CORE_SDK_VERSION: 5.0.100
  PROJECT_PATH: './My-MSBuild.csproj'
  MYGET_ACCESS_TOKEN: ${{ secrets.MYGET_ACCESS_TOKEN }}
  MYGET_SOURCE_URL: 'https://www.myget.org/F/lithiumtoast/api/v3/index.json'

on:
  push:
    branches: [develop]
    tags: [v*]
  pull_request_target:
    branches: [develop]

jobs:

  gitversion-job:
    name: "GitVersion"
    runs-on: ubuntu-latest

    steps:
    - name: "Checkout Git repository"
      uses: actions/checkout@v2

    - name: "Fetch all history for all tags and branches"
      run: git fetch --prune --unshallow

    - name: "Install GitVersion"
      uses: gittools/actions/gitversion/setup@v0.9.6
      env: 
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true # workaround for https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/ until the execute action is updated
      with:
        versionSpec: '5.x'
          
    - name: "Use GitVersion"
      uses: gittools/actions/gitversion/execute@v0.9.6

    - run: echo "$GitVersion_NuGetVersionV2" >> nuget-version.txt

    - name: 'Upload NuGetVersion version artifact'
      uses: actions/upload-artifact@v2
      with:
        name: nuget-version
        path: nuget-version.txt

  build-test-pack-job:
    name: "Build"
    needs: [gitversion-job]
    runs-on: ubuntu-latest

    steps:

    - name: "Download version artifact"
      uses: actions/download-artifact@v2
      with:
        name: nuget-version

    - name: "Read Version"
      id: version
      shell: bash
      run: |
        echo "VERSION=$(cat nuget-version.txt)" >> $GITHUB_ENV

    - name: "Print Version"
      shell: bash
      run: |
        echo $VERSION

    - name: "Checkout repository"
      uses: actions/checkout@master
      with:
        submodules: true
        lfs: true

    - name: "Setup .NET Core CLI"
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '${{ env.DOTNET_CORE_SDK_VERSION }}'

    - name: "Pack solution"
      run: dotnet pack '${{ env.PROJECT_PATH }}' -p:PackageVersion='${{ env.VERSION }}'

    - name: "Upload packages"
      uses: actions/upload-artifact@v2
      with:
        name: nupkg
        path: './nupkg/*/**'

  deploy-job:
    name: "Deploy"
    needs: [build-test-pack-job]
    runs-on: ubuntu-latest
    steps:

    - name: "Setup .NET Core CLI"
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '${{ env.DOTNET_CORE_SDK_VERSION }}'

    - name: "Download NuGet Packages"
      uses: actions/download-artifact@v1
      with:
        name: nupkg
        path: './nupkg'

    - name: "Echo Packages"
      run: find ./nupkg/ -not -type d -exec basename {} \;
      
    - name: "Add Packages Source: MyGet"
      run: dotnet nuget add source $MYGET_SOURCE_URL --name "MyGet"
 
    - name: "Upload Packages: MyGet"
      run: dotnet nuget push "./**/*.nupkg" --source "MyGet" --skip-duplicate --api-key $MYGET_ACCESS_TOKEN